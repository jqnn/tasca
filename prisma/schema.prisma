generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  userName         String             @unique
  displayName      String?
  password         String?
  authMethodId     Int
  authMethod       AuthMethod         @relation(fields: [authMethodId], references: [id])
  role             Role               @default(USER)
  createdAt        DateTime           @default(now())
  Template         Template[]
  TemplateInstance InstanceTemplate[]
}

model AuthMethod {
  id            Int            @id @default(autoincrement())
  type          AuthMethodType @default(LOCAL)
  description   String         @unique
  controllers   String?
  baseDN        String?
  securityType  SecurityType?  @default(NONE)
  port          Int?           @default(389)
  userName      String?
  password      String?
  usersDN       String?
  uidAttribute  String?
  accountSuffix String?
  User          User[]
}

model Template {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  createdById      Int
  createdBy        User               @relation(fields: [createdById], references: [id])
  createdAt        DateTime           @default(now())
  TemplateTask     TemplateTask[]
  TemplateField    TemplateField[]
  TemplateInstance InstanceTemplate[]
}

model TemplateField {
  id            Int             @id @default(autoincrement())
  label         String
  placeHolder   String?
  fieldType     FieldType       @default(TEXT)
  order         Int
  templateId    Int
  template      Template        @relation(fields: [templateId], references: [id], onDelete: Cascade)
  FieldInstance InstanceField[]
}

model TemplateTask {
  id           Int            @id @default(autoincrement())
  task         String
  description  String
  order        Int
  templateId   Int
  template     Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  InstanceTask InstanceTask[]
}

model InstanceTemplate {
  id            Int             @id @default(autoincrement())
  templateId    Int
  template      Template        @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  createdById   Int
  createdBy     User            @relation(fields: [createdById], references: [id])
  status        InstanceStatus  @default(OPEN)
  InstanceField InstanceField[]
  InstanceTask  InstanceTask[]
}

model InstanceField {
  id         Int              @id @default(autoincrement())
  value      String           @default("")
  updatedAt  DateTime         @default(now())
  fieldId    Int
  field      TemplateField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  instanceId Int
  instance   InstanceTemplate @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

model InstanceTask {
  id         Int              @id @default(autoincrement())
  updatedAt  DateTime         @updatedAt
  status     InstanceStatus   @default(OPEN)
  taskId     Int
  task       TemplateTask     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  instanceId Int
  instance   InstanceTemplate @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMINISTRATOR
  OPERATOR
  USER
}

enum AuthMethodType {
  LOCAL
  AD
  LDAP
}

enum SecurityType {
  NONE
  TLS
  SSL
}

enum FieldType {
  TEXT
  NUMBER
}

enum InstanceStatus {
  OPEN
  COMPLETED
}
